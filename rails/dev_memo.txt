@          @@          @@          @@          @@          @@          @@          @@          @
初めはGemfileにrailsのみ記載

================================================================================================
rails new
新規Railsアプリを作成します。ルート直下で以下を実行してください。
------------------------------------------------------------------------------------------------
docker compose run --rm rails rails new . --force --api --database=mysql --skip-action-cable --skip-sprockets --skip-turbolinks --skip-webpack-install --skip-test --skip-bundle
*コマンドは適宜変更
------------------------------------------------------------------------------------------------
--force	生成ファイルと同名のファイルが存在する場合は上書きする
--api	APIモードのRailsアプリとして新規作成する
--database=mysql	DBとしてMySQLを利用する
--skip-action-cable	Action Cable関連の設定ファイルの作成をスキップする
--skip-sprockets	Sprockets の設定をスキップする
--skip-turbolinks	Turbolinks の設定をスキップする
--skip-webpack-install	webpackのインストールをスキップする
-skip-test	minitest の設定をスキップする
--skip-bundle	新規作成時のbundle install実行をスキップする

================================================================================================
コマンドを実行してしばらく待つと、railsディレクトリ配下にRailsアプリが新規作成されるはずです（初回実行時はdocker
イメージのダウンロードなどもあわせて行われるため、結構時間がかかると思います）。

================================================================================================
この後、ルートディレクトリの単位でGit管理していくため、自動作成されるrails/.gitは削除してください。
------------------------------------------------------------------------------------------------
rm -rf rails/.git

================================================================================================
Railsサーバーの立ち上げ
新規作成したRailsアプリのサーバーを起動させ、http://localhost:3000でアクセスできるようにします。
------------------------------------------------------------------------------------------------
まずは、rails/Gemfileを修正します。アプリ新規作成時にデフォルト設定で色々書き込まれていますが、現時点での最低限の
ものだけを残し、以降は必要な場面で都度gemを追加していきます。

================================================================================================
railsコンテナ内で$ bundle installを行い、Gemfileに記載されたgemをインストール。
gemの依存関係をGemfile.lockに記述させます。
------------------------------------------------------------------------------------------------
docker compose run --rm rails bundle install

================================================================================================
config/database.ymlを修正し、railsがmysqlサーバーに接続できるようにします。現時点で記述されているものを全て削
除し、以下に書き換えてください。
------------------------------------------------------------------------------------------------
default: &default
  adapter: mysql2
  encoding: utf8mb4
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  username: root
  port: 3306

development:
  <<: *default
  host: db
  database: myapp_development
  password: password

test:
  <<: *default
  host: db
  database: myapp_test
  password: password

================================================================================================
Railsファイルの準備が完了しましたので、docker-compose.ymlで定義しているdbコンテナ、railsコンテナを両方立ち上げ
ていきます。
まず、$ docker compose buildでコンテナをビルドします（--no-cacheはキャッシュファイルを利用しないオプション。
キャッシュを利用することでビルドが高速化することがありますが、キャッシュから意図しない影響受けて正しく動作できなくな
る可能性もあるので、基本的には付与しておく方が安全です）。
------------------------------------------------------------------------------------------------
docker compose build --no-cache

================================================================================================
その後、$ docker compose upで、railsコンテナ、dbコンテナを起動します（-dはターミナルのバックグラウンドで実行す
るオプションです）
------------------------------------------------------------------------------------------------
docker compose up -d