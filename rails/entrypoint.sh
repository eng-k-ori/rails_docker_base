#!/bin/bash
set -e
# 2
rm -f /myapp/tmp/pids/server.pid
# 3 CMDで渡されたコマンド（コンテナのメインプロセス。→Railsのサーバー起動）を実行
exec "$@"

# @          @@          @@          @@          @@          @@          @@          @@          @
# 1
# `#!/bin/bash`はシェバン（shebang）。1行目に記載。bashを利用したシェルスクリプトであることを示している
# この行は、スクリプトを実行するために使用するシェルまたはインタプリタを指定します。ここでは`bash`シェルを指定。
# linuxカーネルはファイルの先頭に#!があれば、その後ろに書かれたコマンド（この場合は/bin/bash）を実行
# する。
# `bash`は多くのUNIX系システムで標準的なシェルであり、多くの便利な機能と拡張性を提供します。そのため、スクリプトを
# `bash`で実行することがよくあります。

# ================================================================================================
# 2
# /myapp:DockerfileでWORKDIRに指定したディレクトリ
# ------------------------------------------------------------------------------------------------
# Railsに潜在的に存在するserver.pidファイルがあれば削除します。
# pidファイルが既に存在するためサーバーが立ち上がらないエラーを回避する為。
# pidはプロセスid。開発用webサーバーを起動する時に、tmp/pids/server.pidに書き込まれ、終了する時に削除される。
# server.pidにpidが書かれているとサーバーが起動中と判断されてしまう。sarver.pidファイルは毎回削除する。

# ================================================================================================
# 3
# exec "$@"
# "$@"はシェルスクリプトの特殊な変数で、スクリプトに渡されたすべての引数を展開するために使われる。
# "$@"を使うことで、DockerのCMDやdocker runコマンドで指定された引数をそのまま実行することができる。
# また、スクリプトが終わるときに指定されたコマンドを実行し、そのコマンドがプロセスID 1を引き継ぐ。これは、コンテナ内
# で正しくプロセスが管理されるために重要。プロセスID 1を持つプロセスが、シグナル（停止や再起動）を正しく受け取るため、
# コンテナ内でのプロセス管理が確実に行われる。